PCM(脉冲编码调制）：对音频模拟信号进行一定频率的采样，将模拟信号转化为数字信号，是一种没有压缩的数据。
PCM数据格式：PCM中的声音数据没有被压缩，如果是单声道的文件，采样数据按时间的先后顺序依次存入。(它的基本组织单位是BYTE(8bit)或WORD(16bit))，如果是双声道的文件，采样数据按时间先后顺序交叉地存入。
YUV，分为三个分量，“Y”表示明亮度（Luminance或Luma），也就是灰度值；而“U”和“V” 表示的则是色度（Chrominance或Chroma），作用是描述影像色彩及饱和度，用于指定像素的颜色。
在YUV 家族中, YCbCr 是在计算机系统中应用最多的成员, 其应用领域很广泛,JPEG、MPEG，H264均采用此格式。一般所讲的YUV大多是指YCbCr，其中，Cr反映了RGB输入信号红色部分与RGB信号亮度值之间的差异，而Cb反映的是RGB输入信号蓝色部分与RGB信号亮度值之间的差异，此即所谓的色差信号。
采样方式：
1.4：4：4采样：每一个Y对应一组UV分量
2.4：2：2采样：每两个Y共用一组UV分量
3.4：2：0采样：每四个Y共用一个UV分量
存储方式：
packed：每个像素点的Y,U,V是连续交错存储的。
planar：先连续存储所有像素点的Y，紧接着存储所有像素点的U，随后是所有像素点的V。
rtmp:实时信息传输协议
需要发送6个chunk来建立rtmp连接，客户端发送c0,c1,c2，服务端发送s0,s1,s2，完成后建立连接。
消息字段：
Timestamp（时间戳）：消息的时间戳（但不一定是当前时间，后面会介绍），4个字节
Length(长度)：是指Message Payload（消息负载）即音视频等信息的数据的长度，3个字节
TypeId(类型Id)：消息的类型Id，1个字节
Message Stream ID（消息的流ID）：每个消息的唯一标识，划分成Chunk和还原Chunk为Message的时候都是根据这个ID来辨识是否是同一个消息的Chunk的，4个字节，并且以小端格式存储。
HLS：HTTP Live Streaming，是由苹果公司提出的基于HTT的流媒体网络传输协议。他的工作原理是把整个流分成一个个小的基于HTTP的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从愈多不同的备用源中以不同的速率下载同样的资源，允许流媒体绘画适应不同的数据速率。在开始一个流媒体会话时，客户端会下载一个包含源数据的extended M3U（m3u8）playlist文件，用于寻找可用的媒体流。
参考链接：https://www.jianshu.com/p/32417d8ee5b6
h.264/h.265视频编码相关重要知识：
vcl(视频编码层)和nal(网络抽象层)：我的理解就是网络中ip层和数据链路层的区别，vcl层将视频进行编码压缩，nal层将vcl包装成码流，包括一些控制信息，定界符之类的。
nalu头部字段：
禁止位：1位，网络传输错误时会被置1，然后被丢弃。
优先级位：2位，数值越大表明优先级越高。
类型位：5位，表明了该nalu的类型。
IBP帧的解释：
I帧：帧内编码帧 又称intra picture，表示关键帧，I 帧通常是每个 GOP（MPEG 所使用的一种视频压缩技术）的第一个帧，经过适度地压缩，做为随机访问的参考点，可以当成图象。I帧可以看成是一个图像经过压缩后的产物。你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）
P帧： 前向预测编码帧 又称predictive-frame，通过充分将低于图像序列中前面已编码帧的时间冗余信息来压缩传输数据量的编码图像，也叫预测帧；表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面（I帧）叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）
B帧： 双向预测内插编码帧(双向差别帧、双向预测帧) 又称bi-directional interpolated prediction frame，既考虑与源图像序列前面已编码帧，也顾及源图像序列后面已编码帧之间的时间冗余信息来压缩传输数据量的编码图像；也就是B帧记录的是本帧与前后帧的差别（具体比较复杂，有4种情况），换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累
编解码过程：
帧间和帧内预测（Estimation）：帧内预测主要消除空间冗余，帧间预测主要消除空间冗余
变换（Transform）和反变换
量化（Quantization）和反量化：对残差数据进行量化(DCT)
环路滤波（Loop Filter）
熵编码（Entropy Coding）：一种无损编码手段，主要消除码字之间的冗余
h.264和h.265区别：
整体沿用了264的框架，但做了优化与改进：提高压缩效率、提高鲁棒性和错误恢复能力、减少实时的时延、减少信道获取时间和随机接入时延、降低复杂度等。
HEVC设立了GOP的3种编码结构，即帧内编码、低延时编码和随机访问编码。在帧内编码结构中，每一帧图像都是按帧内方式进行空间域预测编码，不使用时间参考帧。在低时延( Low Delay)编码结构中，只有第一帧图像按照帧内方式进行编码，并成为 IDR帧，随后的各帧都作为一般的P帧和B帧进行编码。这主要是为交互式实时通信设计的。随机访问( Random Access) 编码结构主要由分级B帧构成( Hierarchical B) ，周期性地(大约每隔 1秒) 插入随机访问( Clean Random Access，CRA) 帧。这些CRA 帧成为编码视频流中的随机访问点( Random Access Point，RAP) 。所谓随机访问点是指对这些帧的解码可以独立进行，不需要参考比特流中前面已经解码的图像帧。
在HEVC中依然采用分块编码方式，但不同于H.264中固定尺寸的宏块，HEVC中块的尺寸是可以自适应改变的。HEVC中定义了四个新的概念：编码树单元、编码单元、预测单元和变换单元。
HEVC只采用了CABAC进行熵编码，而没有使用CAVLC。
还有一些与变幻量化及熵编码相关的细节不再整理，推荐两个博主可以参考一些知识细节https://blog.csdn.net/lin453701006；https://blog.csdn.net/HEVC_CJL